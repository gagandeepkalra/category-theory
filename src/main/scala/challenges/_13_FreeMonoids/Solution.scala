package challenges._13_FreeMonoids

object Solution {

  /**
    * 1. You might think (as I did, originally) that the requirement that a homomorphism of monoids preserve the unit is
    * redundant. After all, we know that for all ùëé, h a * h e = h (a * e) = h a
    * So hùëí acts like a right unit (and, by analogy, as a left unit). The problem is that hùëé, for all ùëé might only cover a
    * sub-monoid of the target monoid. There may be a ‚Äútrue‚Äù unit outside of the image of h.
    * Show that an isomorphism between monoids that preserves multiplication must automatically preserve unit.
    */
  // Monoid A and B, under * multiplication
  //
  // f: A => B
  // g: B => A
  //
  // A * unitA = A and unitA * A = A
  // B * unitB = B and unitB * B = B
  //
  // for homomorphism f, let's assume it doesn't map unitA to unitB
  // it then must map to something else
  //
  // unitA <=> notUnitB and notUnitA <=> unitB, then
  //
  // for all ùëé, h a * h e = h (a * e)
  //
  // LHS
  // h a * h e
  // b * notUnitB // can't be reduced further
  //
  // RHS
  // h(a * e)
  // h(a * unitA)
  // h(a)
  // b
  //
  // b = b * notUnitB and given symmetry b = notUnitB * b, notUnitB follows both left and right identity Monoid laws.
  // hence notUnitB must be unitB (or isomorphic)
  //
  // similarly from g it follows, a = a * notUnitA and given symmetry a = notUnitA * a,
  // notUnitA == unitA and notUnitB == unitB
  // Our initial assumption was incorrect unitA maps to unitB
  //

  /**
    * 2. Consider a monoid homomorphism from lists of integers with concatenation to integers with multiplication. What is
    * the image of the empty list []? Assume that all singleton lists are mapped to the integers they contain,
    * that is [3] is mapped to 3, etc. What‚Äôs the image of [1, 2, 3, 4]? How many different lists map to the integer 12?
    * Is there any other homomorphism between the two monoids?
    */
  // image of both the empty list [] and the singleton unit 1 list [1] would be integer 1.
  //
  // image of [1, 2, 3, 4]
  // image of [1, (2, 3, 4)]
  // image of [1, (2, (3, 4))]
  // image of [1, (2, 12)]
  // image of [1, 24]
  // 24
  //
  // [1, 12] ... 2
  // [2, 6] ... 2
  // [3, 4] ... 2
  // [1, 2, 2, 3] ... 12
  // [2, 2, 3] ... 3
  // [1, 3, 4] ... 6
  // total 27 different lists
  //
  // yes, we can collapse all lists to the unit 1
  //

  /**
    * 3. What is the free monoid generated by a one-element set? Can you see what it‚Äôs isomorphic to?
    */
  // A one element set is equivalent to type unit and the free monoid generated by it [unit] with concatenation.
  // it's isomorphic to the Set of integers over addition
  //

}
